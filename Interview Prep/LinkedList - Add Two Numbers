/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
      
        // What do I know?
        // 2 linked lists as params
        // They're non empty
        // They're in reverse order
        // The function must add the 2 linked lists and return the sum as a linked list
        // They can be different sizes, l1 = [1], l2= [12]
        // [ ] I must be careful with the carry over if sum > 9
        
        // Example 1:
        // Input: 
        // l1 = [2,4,3], 
        // l2 = [5,6,4]
        // Output: [7,0,8]
        // Explanation: 342 + 465 = 807
        
        // Example 2:
        // [1]
        // [1,2]
        // [2,2]
        
        // Example 2:
        // [1]
        // [2]
        // [3]
        ListNode result = new ListNode();
        ListNode root = result;
        ListNode currentOne = l1;
        ListNode currentTwo = l2;
        int carry = 0;
        try{
       

            while(currentOne != null || currentTwo != null || carry > 0){
                // Console.WriteLine($"{currentOne}, {currentTwo},{carry}");

                int store = 0;
                int integerOne = (currentOne != null) ? currentOne.val : 0;
                int integerTwo = (currentTwo != null) ? currentTwo.val : 0;
                int sum = integerOne + integerTwo + carry;
                // Console.WriteLine(sum);
                carry = 0;

                if(sum/10 == 1){
                    carry = 1;
                    store = sum%10;

                }
                else{
                    // happy path 
                    store = sum;  
                }

                result.next = new ListNode(store);
                result = result.next;

                if(currentOne != null){
                    currentOne = currentOne.next;
                    
                }
                if(currentTwo != null){
                    currentTwo = currentTwo.next;
                }
            }
        }
        catch(Exception ex){
            Console.WriteLine($"Ex: [{ex}] Inner: [ex.InnerException] StackTrace: [{ex.StackTrace}]");
        }
        
        
        return root.next;
        
        
        
//         var result = new ListNode();
//         ListNode head = result;

//         var integer1 = 0;
//         var integer2 = 0;
//         var sum = 0;
//         int carry = 0;
//         var store = 0;

//         while(l1 != null || l2 != null || carry > 0){
//             integer1 = (l1?.val != null) ? l1.val : 0;
//             integer2 = (l2?.val != null) ? l2.val : 0;
            
//             l1 = l1?.next;
//             l2 = l2?.next;

//             sum = (integer1 + integer2 + carry);
//             carry = 0; // reset carry after adding it up
//             carry = sum/10;
//             store = sum%10; 
            
//             result.next = new ListNode(store);
//             result = result.next;

//         }

//         return head.next;
    }
}